<!DOCTYPE html>
<html>
  <head>
    <title>Bot Management - Discord Bot Platform</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/editor/editor.main.css"
      rel="stylesheet"
    />
  </head>
  <body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
      <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
        <div class="flex justify-between items-center">
          <h1 class="text-2xl font-bold">Bot <%= bot.id %></h1>
          <div class="flex space-x-2">
            <button
              onclick="deployCommands()"
              class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded"
            >
              Deploy Commands
            </button>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Interactions List -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Interactions</h2>
          <div class="space-y-4">
            <% bot.interactions.forEach(interaction => { %>
            <div class="border rounded p-4">
              <div class="flex justify-between items-center mb-2">
                <h3 class="font-semibold"><%= interaction.name %></h3>
                <div class="flex space-x-2">
                  <button
                    onclick="copyCode('<%= interaction.id %>')"
                    class="text-gray-500 hover:text-gray-600"
                  >
                    Copy Code
                  </button>
                  <button
                    onclick="deleteInteraction('<%= interaction.id %>')"
                    class="text-red-500 hover:text-red-600"
                  >
                    Delete
                  </button>
                </div>
              </div>
              <% if (interaction.type === "APPLICATION_COMMAND") { %>
              <button
                onclick="editInteraction('<%= JSON.stringify(interaction) %>', true)"
                class="text-blue-500 hover:text-blue-600 mb-2"
              >
                Edit Configuration
              </button>
              <% } %>
              <button
                onclick="editInteraction('<%= JSON.stringify(interaction) %>')"
                class="text-blue-500 hover:text-blue-600"
              >
                Edit Code
              </button>
            </div>
            <% }) %>
          </div>
        </div>

        <!-- Code Editor -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Code Editor</h2>
          <div id="editor" style="height: 500px; border: 1px solid #ddd"></div>
          <div class="mt-4 flex justify-end">
            <button
              onclick="saveCode()"
              class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
            >
              Save Changes
            </button>
          </div>
        </div>
      </div>

      <!-- Add New Interaction Form -->
      <div class="bg-white p-6 rounded-lg shadow-md mb-6">
        <h2 class="text-xl font-semibold mb-4">Add New Interaction</h2>
        <form id="newInteractionForm" class="space-y-4">
          <div>
            <label
              for="interactionName"
              class="block text-sm font-medium text-gray-700"
              >Name</label
            >
            <input
              type="text"
              id="interactionName"
              name="name"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            />
          </div>

          <div>
            <label
              for="interactionType"
              class="block text-sm font-medium text-gray-700"
              >Type</label
            >
            <select
              id="interactionType"
              name="type"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            >
              <option disabled selected value="">
                Select Interaction Type
              </option>
              <option disabled value="PING">Ping</option>
              <option value="APPLICATION_COMMAND">Application Command</option>
              <option value="MESSAGE_COMPONENT">Message Component</option>
              <option disabled value="APPLICATION_COMMAND_AUTOCOMPLETE">
                Application Command Autocomplete
              </option>
              <option value="MODAL_SUBMIT">Modal Submit</option>
            </select>
          </div>

          <div id="jsonFormatSection" class="hidden">
            <label
              for="interactionConfiguration"
              class="block text-sm font-medium text-gray-700"
            >
              Configuration (JSON)
            </label>
            <textarea
              id="configurationEditor"
              class="mt-1 block w-full h-64 p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            ></textarea>
          </div>

          <div id="customIdSection" class="hidden">
            <label
              for="customId"
              class="block text-sm font-medium text-gray-700"
              >Custom ID</label
            >
            <input
              type="text"
              id="customId"
              name="customId"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            />
          </div>

          <div class="flex justify-end">
            <button
              type="submit"
              class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Create Interaction
            </button>
          </div>
        </form>
      </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.js"></script>
    <script>
      let editor;
      let currentInteraction;
      let shouldSaveConfiguration = false;

      require.config({
        paths: {
          vs: "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs",
        },
      });
      require(["vs/editor/editor.main"], function () {
        editor = monaco.editor.create(document.getElementById("editor"), {
          value: "{}",
          language: "json",
          theme: "vs-light",
          minimap: { enabled: false },
        });

        // Initialize jsonResponseEditor
        window.jsonResponseEditor = monaco.editor.create(
          document.getElementById("jsonResponseEditor"),
          {
            value: "{}",
            language: "json",
            theme: "vs-light",
            minimap: { enabled: false },
          },
        );
      });

      function editInteraction(interactionJson, isConfiguration = false) {
        const interaction = JSON.parse(interactionJson);
        currentInteraction = interaction;
        shouldSaveConfiguration = isConfiguration;
        if (isConfiguration) {
          editor.setValue(JSON.stringify(interaction.configuration, null, 2));
        } else {
          editor.setValue(JSON.stringify(interaction.jsonResponse, null, 2));
        }
      }

      async function saveCode() {
        if (shouldSaveConfiguration) {
          await saveConfiguration();
          return;
        }

        if (!currentInteraction) {
          alert("Please select an interaction first");
          return;
        }

        const jsonResponse = editor.getValue();
        try {
          const response = await fetch(
            `/bot/<%= bot.id %>/interaction/${currentInteraction.id}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ jsonResponse }),
            },
          );

          if (response.ok) {
            alert("Code saved successfully!");
          } else {
            alert("Failed to save code. Please try again.");
          }
        } catch (error) {
          alert("An error occurred. Please try again.");
        }
      }

      async function saveConfiguration() {
        const configuration = editor.getValue();
        try {
          const response = await fetch(
            `/bot/<%= bot.id %>/interaction/${currentInteraction.id}/configuration`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ configuration }),
            },
          );

          if (response.ok) {
            alert("Configuration saved successfully!");
          } else {
            alert("Failed to save configuration. Please try again.");
          }
        } catch (error) {
          alert("An error occurred. Please try again.");
        }
      }

      // Show/hide fields based on interaction type
      function updateInteractionFields() {
        const type = document.getElementById("interactionType").value;
        const jsonFormatSection = document.getElementById("jsonFormatSection");
        const customIdSection = document.getElementById("customIdSection");

        if (type === "APPLICATION_COMMAND") {
          jsonFormatSection.classList.remove("hidden");
          customIdSection.classList.add("hidden");
        } else if (type === "MESSAGE_COMPONENT" || type === "MODAL_SUBMIT") {
          jsonFormatSection.classList.add("hidden");
          customIdSection.classList.remove("hidden");
        } else {
          jsonFormatSection.classList.add("hidden");
          customIdSection.classList.add("hidden");
        }
      }

      // Update fields when type changes
      document
        .getElementById("interactionType")
        .addEventListener("change", updateInteractionFields);

      // Initialize editors and form handling
      document.addEventListener("DOMContentLoaded", function () {
        // Set initial field visibility
        updateInteractionFields();

        // Form submission handling
        document
          .getElementById("newInteractionForm")
          .addEventListener("submit", async function (e) {
            e.preventDefault();
            const type = document.getElementById("interactionType").value;
            try {
              const formData = {
                name: document.getElementById("interactionName").value,
                type: type,
                configuration:
                  type === "APPLICATION_COMMAND"
                    ? JSON.parse(
                        document.getElementById("configurationEditor").value,
                      )
                    : {},
                customId:
                  type === "MESSAGE_COMPONENT" || type === "MODAL_SUBMIT"
                    ? document.getElementById("customId").value
                    : "",
                jsonResponse: {},
              };

              const response = await fetch(`/bot/<%= bot.id %>/interaction`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(formData),
              });

              if (response.ok) {
                window.location.reload();
              } else {
                const data = await response.json();
                alert(data.error || "Failed to create interaction");
              }
            } catch (error) {
              alert("Error creating interaction: " + error.message);
            }
          });
      });

      async function deployCommands() {
        try {
          const response = await fetch(`/bot/<%= bot.id %>/deploy`, {
            method: "POST",
          });

          if (response.ok) {
            alert("Commands deployed successfully!");
          } else {
            alert("Failed to deploy commands. Please try again.");
          }
        } catch (error) {
          alert("An error occurred. Please try again.");
        }
      }

      async function deleteInteraction(interactionId) {
        if (
          !confirm(
            "Are you sure you want to delete this interaction? This action cannot be undone.",
          )
        ) {
          return;
        }

        try {
          const response = await fetch(
            `/bot/<%= bot.id %>/interaction/${interactionId}/delete`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            },
          );

          if (response.ok) {
            window.location.reload();
          } else {
            alert("Failed to delete interaction. Please try again.");
          }
        } catch (error) {
          alert("An error occurred. Please try again.");
        }
      }
    </script>
  </body>
</html>
